// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package policystatus

import "fmt"
import "reflect"
import "encoding/json"

// UnmarshalJSON implements json.Unmarshaler.
func (j *PolicyStatusJsonEnforceStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PolicyStatusJsonEnforceStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PolicyStatusJsonEnforceStatus, v)
	}
	*j = PolicyStatusJsonEnforceStatus(v)
	return nil
}

// O-RAN standard policy status
type PolicyStatusJson struct {
	// EnforceReason corresponds to the JSON schema field "enforceReason".
	EnforceReason *PolicyStatusJsonEnforceReason `json:"enforceReason,omitempty" yaml:"enforceReason,omitempty"`

	// EnforceStatus corresponds to the JSON schema field "enforceStatus".
	EnforceStatus PolicyStatusJsonEnforceStatus `json:"enforceStatus" yaml:"enforceStatus"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PolicyStatusJsonEnforceReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PolicyStatusJsonEnforceReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PolicyStatusJsonEnforceReason, v)
	}
	*j = PolicyStatusJsonEnforceReason(v)
	return nil
}

type PolicyStatusJsonEnforceReason string

const PolicyStatusJsonEnforceReasonOTHERREASON PolicyStatusJsonEnforceReason = "OTHER_REASON"
const PolicyStatusJsonEnforceReasonSCOPENOTAPPLICABLE PolicyStatusJsonEnforceReason = "SCOPE_NOT_APPLICABLE"
const PolicyStatusJsonEnforceReasonSTATEMENTNOTAPPLICABLE PolicyStatusJsonEnforceReason = "STATEMENT_NOT_APPLICABLE"

type PolicyStatusJsonEnforceStatus string

const PolicyStatusJsonEnforceStatusENFORCED PolicyStatusJsonEnforceStatus = "ENFORCED"
const PolicyStatusJsonEnforceStatusNOTENFORCED PolicyStatusJsonEnforceStatus = "NOT_ENFORCED"

var enumValues_PolicyStatusJsonEnforceReason = []interface{}{
	"SCOPE_NOT_APPLICABLE",
	"STATEMENT_NOT_APPLICABLE",
	"OTHER_REASON",
}
var enumValues_PolicyStatusJsonEnforceStatus = []interface{}{
	"ENFORCED",
	"NOT_ENFORCED",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PolicyStatusJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["enforceStatus"]; !ok || v == nil {
		return fmt.Errorf("field enforceStatus in PolicyStatusJson: required")
	}
	type Plain PolicyStatusJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PolicyStatusJson(plain)
	return nil
}
